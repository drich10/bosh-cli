// This file was generated by counterfeiter
package stemcellfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-cli/stemcell"
)

type FakePacker struct {
	PackStub        func(extractedStemcell stemcell.ExtractedStemcell) (string, error)
	packMutex       sync.RWMutex
	packArgsForCall []struct {
		extractedStemcell stemcell.ExtractedStemcell
	}
	packReturns struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePacker) Pack(extractedStemcell stemcell.ExtractedStemcell) (string, error) {
	fake.packMutex.Lock()
	fake.packArgsForCall = append(fake.packArgsForCall, struct {
		extractedStemcell stemcell.ExtractedStemcell
	}{extractedStemcell})
	fake.recordInvocation("Pack", []interface{}{extractedStemcell})
	fake.packMutex.Unlock()
	if fake.PackStub != nil {
		return fake.PackStub(extractedStemcell)
	} else {
		return fake.packReturns.result1, fake.packReturns.result2
	}
}

func (fake *FakePacker) PackCallCount() int {
	fake.packMutex.RLock()
	defer fake.packMutex.RUnlock()
	return len(fake.packArgsForCall)
}

func (fake *FakePacker) PackArgsForCall(i int) stemcell.ExtractedStemcell {
	fake.packMutex.RLock()
	defer fake.packMutex.RUnlock()
	return fake.packArgsForCall[i].extractedStemcell
}

func (fake *FakePacker) PackReturns(result1 string, result2 error) {
	fake.PackStub = nil
	fake.packReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakePacker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.packMutex.RLock()
	defer fake.packMutex.RUnlock()
	return fake.invocations
}

func (fake *FakePacker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.Packer = new(FakePacker)
